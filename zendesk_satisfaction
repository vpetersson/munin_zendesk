#!/usr/bin/env python

'''
@author: Viktor Petersson
For the latest version, visit https://github.com/vpetersson/munin_zendesk
'''

import requests, cStringIO, json, sys, os, pickle, zendesk_helper

username = zendesk_helper.username
password = zendesk_helper.password 
subdomain = zendesk_helper.subdomain
cache_folder = zendesk_helper.cache_folder
cache_file_path = os.path.join(cache_folder, 'zendesk_satisfaction.pkl')

if len(sys.argv) == 2 and sys.argv[1] == "autoconf":
    print 'yes'

elif len(sys.argv) == 2 and sys.argv[1] == "config":
    print 'graph_title Zendesk Satisfaction'
    print 'graph_vlabel count'
    print 'graph_category zendesk'
    print 'total_bad.label Unsatisfied Users'
    print 'total_bad.type GAUGE'
    print 'total_good.label Satisfied Users'
    print 'total_good.type GAUGE'
    print 'graph_args --base 1000'

# Retreive the real data
elif len(sys.argv) == 2 and sys.argv[1] == "refreshcache":
    # Define variables
    all_tickets = []
    ticketsGood = 0
    ticketsBad = 0

    cache_file = open(cache_file_path, 'wb')
    
    satisfaction = "https://" + str(subdomain) + ".zendesk.com/api/v2/satisfaction_ratings.json"
    fetch = requests.get(satisfaction, auth=(username, password))
    if fetch.status_code != 200:
        print 'Received non-200 status from Zendesk.'
        sys.exit(1)
    result = json.loads(fetch.content)

    # Ops, there's another page with tickets. Let's keep fetching.
    while result['next_page'] != None:
        fetch_more = requests.get(str(result['next_page']), auth=(username, password))
        result = json.loads(fetch_more.content)
        all_tickets += result['satisfaction_ratings']

    if all_tickets:
        score = all_tickets
    else:
        score =  result['satisfaction_ratings']
        
    # Do the math
    for i in score:
        if i['score'] == 'good':
            ticketsGood += 1
        elif i['score'] == 'bad':
            ticketsBad += 1
        
    # Gather the result and write them to the cache
    result  = { 'ticketsGood' : ticketsGood, 'ticketsBad' : ticketsBad }
    pickle.dump(result, cache_file)
    cache_file.close()
        
else:
    # Fetch the result from the local cache
    if os.path.isfile(cache_file_path):
        cache_file = open(cache_file_path, 'rb')
        result = pickle.load(cache_file)
        ticketsGood = result['ticketsGood']
        ticketsBad = result['ticketsBad']
        cache_file.close()
   
        # Report the result
        print 'total_good.value ' + str(ticketsGood)
        print 'total_bad.value ' + str(ticketsBad)

    else:
        print 'No local cache available. Exiting.'
        sys.exit(1)
